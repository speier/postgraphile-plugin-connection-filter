// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the filter plugin and the \`ignoreIndexes: false\` option 1`] = `
"type ArrayType implements Node {
  bit4Array: [BitString]
  boolArray: [Boolean]
  bpchar4Array: [String]
  byteaArray: [Base64EncodedBinary]
  char4Array: [String]
  cidrArray: [String]
  citextArray: [String]
  dateArray: [Date]
  float4Array: [Float]
  float8Array: [Float]
  hstoreArray: [KeyValueHash]
  id: Int!
  inetArray: [InternetAddress]
  int2Array: [Int]
  int4Array: [Int]
  int8Array: [BigInt]
  intervalArray: [Interval]
  jsonArray: [JSON]
  jsonbArray: [JSON]
  macaddrArray: [String]
  moneyArray: [Float]
  nameArray: [String]

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  numericArray: [BigFloat]
  textArray: [String]
  timeArray: [Time]
  timestampArray: [Datetime]
  timestamptzArray: [Datetime]
  timetzArray: [Time]
  uuidArray: [UUID]
  varbitArray: [BitString]
  varcharArray: [String]
  xmlArray: [XML]
}

"""
A filter to be used against \`ArrayType\` object types. All fields are combined with a logical ‘and.’
"""
input ArrayTypeFilter {
  """Checks for all expressions in this list."""
  and: [ArrayTypeFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: ArrayTypeFilter

  """Checks for any expressions in this list."""
  or: [ArrayTypeFilter!]
}

"""A connection to a list of \`ArrayType\` values."""
type ArrayTypesConnection {
  """
  A list of edges which contains the \`ArrayType\` and cursor to aid in pagination.
  """
  edges: [ArrayTypesEdge]!

  """A list of \`ArrayType\` objects."""
  nodes: [ArrayType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`ArrayType\` you could get from the connection."""
  totalCount: Int!
}

"""A \`ArrayType\` edge in the connection."""
type ArrayTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`ArrayType\` at the end of the edge."""
  node: ArrayType
}

"""Methods to use when ordering \`ArrayType\`."""
enum ArrayTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Backward implements Node {
  """Reads a single \`Filterable\` that is related to this \`Backward\`."""
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type BackwardCompound implements Node {
  backwardCompound1: Int!
  backwardCompound2: Int!

  """
  Reads a single \`Filterable\` that is related to this \`BackwardCompound\`.
  """
  filterableByBackwardCompound1AndBackwardCompound2: Filterable
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`BackwardCompound\` object types. All fields are combined with a logical ‘and.’
"""
input BackwardCompoundFilter {
  """Checks for all expressions in this list."""
  and: [BackwardCompoundFilter!]

  """Filter by the object’s \`backwardCompound1\` field."""
  backwardCompound1: IntFilter

  """
  Filter by the object’s \`filterableByBackwardCompound1AndBackwardCompound2\` relation.
  """
  filterableByBackwardCompound1AndBackwardCompound2: FilterableFilter

  """Negates the expression."""
  not: BackwardCompoundFilter

  """Checks for any expressions in this list."""
  or: [BackwardCompoundFilter!]
}

"""A connection to a list of \`BackwardCompound\` values."""
type BackwardCompoundsConnection {
  """
  A list of edges which contains the \`BackwardCompound\` and cursor to aid in pagination.
  """
  edges: [BackwardCompoundsEdge]!

  """A list of \`BackwardCompound\` objects."""
  nodes: [BackwardCompound]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`BackwardCompound\` you could get from the connection.
  """
  totalCount: Int!
}

"""A \`BackwardCompound\` edge in the connection."""
type BackwardCompoundsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`BackwardCompound\` at the end of the edge."""
  node: BackwardCompound
}

"""Methods to use when ordering \`BackwardCompound\`."""
enum BackwardCompoundsOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against \`Backward\` object types. All fields are combined with a logical ‘and.’
"""
input BackwardFilter {
  """Checks for all expressions in this list."""
  and: [BackwardFilter!]

  """Filter by the object’s \`filterableByFilterableId\` relation."""
  filterableByFilterableId: FilterableFilter

  """A related \`filterableByFilterableId\` exists."""
  filterableByFilterableIdExists: Boolean

  """Filter by the object’s \`filterableId\` field."""
  filterableId: IntFilter

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: BackwardFilter

  """Checks for any expressions in this list."""
  or: [BackwardFilter!]
}

"""A connection to a list of \`Backward\` values."""
type BackwardsConnection {
  """
  A list of edges which contains the \`Backward\` and cursor to aid in pagination.
  """
  edges: [BackwardsEdge]!

  """A list of \`Backward\` objects."""
  nodes: [Backward]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Backward\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Backward\` edge in the connection."""
type BackwardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Backward\` at the end of the edge."""
  node: Backward
}

"""Methods to use when ordering \`Backward\`."""
enum BackwardsOrderBy {
  FILTERABLE_ID_ASC
  FILTERABLE_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Binary data encoded using Base64"""
scalar Base64EncodedBinary

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A range of \`BigFloat\`."""
type BigFloatRange {
  """The ending bound of our range."""
  end: BigFloatRangeBound

  """The starting bound of our range."""
  start: BigFloatRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type BigFloatRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: BigFloat!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""A range of \`BigInt\`."""
type BigIntRange {
  """The ending bound of our range."""
  end: BigIntRangeBound

  """The starting bound of our range."""
  start: BigIntRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type BigIntRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: BigInt!
}

"""A string representing a series of binary bits"""
scalar BitString

scalar Char4Domain

type Child implements Node {
  """Reads a single \`Filterable\` that is related to this \`Child\`."""
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`Child\` object types. All fields are combined with a logical ‘and.’
"""
input ChildFilter {
  """Checks for all expressions in this list."""
  and: [ChildFilter!]

  """Filter by the object’s \`filterableByFilterableId\` relation."""
  filterableByFilterableId: FilterableFilter

  """A related \`filterableByFilterableId\` exists."""
  filterableByFilterableIdExists: Boolean

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: ChildFilter

  """Checks for any expressions in this list."""
  or: [ChildFilter!]
}

type ChildNoRelatedFilter implements Node {
  """
  Reads a single \`Filterable\` that is related to this \`ChildNoRelatedFilter\`.
  """
  filterableByFilterableId: Filterable
  filterableId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single \`Unfilterable\` that is related to this \`ChildNoRelatedFilter\`.
  """
  unfilterableByUnfilterableId: Unfilterable
  unfilterableId: Int
}

"""
A filter to be used against \`ChildNoRelatedFilter\` object types. All fields are combined with a logical ‘and.’
"""
input ChildNoRelatedFilterFilter {
  """Checks for all expressions in this list."""
  and: [ChildNoRelatedFilterFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: ChildNoRelatedFilterFilter

  """Checks for any expressions in this list."""
  or: [ChildNoRelatedFilterFilter!]
}

"""A connection to a list of \`ChildNoRelatedFilter\` values."""
type ChildNoRelatedFiltersConnection {
  """
  A list of edges which contains the \`ChildNoRelatedFilter\` and cursor to aid in pagination.
  """
  edges: [ChildNoRelatedFiltersEdge]!

  """A list of \`ChildNoRelatedFilter\` objects."""
  nodes: [ChildNoRelatedFilter]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`ChildNoRelatedFilter\` you could get from the connection.
  """
  totalCount: Int!
}

"""A \`ChildNoRelatedFilter\` edge in the connection."""
type ChildNoRelatedFiltersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`ChildNoRelatedFilter\` at the end of the edge."""
  node: ChildNoRelatedFilter
}

"""Methods to use when ordering \`ChildNoRelatedFilter\`."""
enum ChildNoRelatedFiltersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of \`Child\` values."""
type ChildrenConnection {
  """
  A list of edges which contains the \`Child\` and cursor to aid in pagination.
  """
  edges: [ChildrenEdge]!

  """A list of \`Child\` objects."""
  nodes: [Child]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Child\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Child\` edge in the connection."""
type ChildrenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Child\` at the end of the edge."""
  node: Child
}

"""Methods to use when ordering \`Child\`."""
enum ChildrenOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Composite {
  a: Int
  b: String
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""A calendar date in YYYY-MM-DD format."""
scalar Date

scalar DateDomain

"""A range of \`Date\`."""
type DateRange {
  """The ending bound of our range."""
  end: DateRangeBound

  """The starting bound of our range."""
  start: DateRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type DateRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Date!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""A range of \`Datetime\`."""
type DatetimeRange {
  """The ending bound of our range."""
  end: DatetimeRangeBound

  """The starting bound of our range."""
  start: DatetimeRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type DatetimeRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Datetime!
}

type DomainType implements Node {
  char4Domain: Char4Domain
  dateDomain: DateDomain
  id: Int!
  int4Domain: Int4Domain

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`DomainType\` object types. All fields are combined with a logical ‘and.’
"""
input DomainTypeFilter {
  """Checks for all expressions in this list."""
  and: [DomainTypeFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: DomainTypeFilter

  """Checks for any expressions in this list."""
  or: [DomainTypeFilter!]
}

"""A connection to a list of \`DomainType\` values."""
type DomainTypesConnection {
  """
  A list of edges which contains the \`DomainType\` and cursor to aid in pagination.
  """
  edges: [DomainTypesEdge]!

  """A list of \`DomainType\` objects."""
  nodes: [DomainType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`DomainType\` you could get from the connection."""
  totalCount: Int!
}

"""A \`DomainType\` edge in the connection."""
type DomainTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`DomainType\` at the end of the edge."""
  node: DomainType
}

"""Methods to use when ordering \`DomainType\`."""
enum DomainTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EnumArrayType implements Node {
  enumArray: [Mood]
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`EnumArrayType\` object types. All fields are combined with a logical ‘and.’
"""
input EnumArrayTypeFilter {
  """Checks for all expressions in this list."""
  and: [EnumArrayTypeFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: EnumArrayTypeFilter

  """Checks for any expressions in this list."""
  or: [EnumArrayTypeFilter!]
}

"""A connection to a list of \`EnumArrayType\` values."""
type EnumArrayTypesConnection {
  """
  A list of edges which contains the \`EnumArrayType\` and cursor to aid in pagination.
  """
  edges: [EnumArrayTypesEdge]!

  """A list of \`EnumArrayType\` objects."""
  nodes: [EnumArrayType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`EnumArrayType\` you could get from the connection."""
  totalCount: Int!
}

"""A \`EnumArrayType\` edge in the connection."""
type EnumArrayTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`EnumArrayType\` at the end of the edge."""
  node: EnumArrayType
}

"""Methods to use when ordering \`EnumArrayType\`."""
enum EnumArrayTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EnumType implements Node {
  enum: Mood
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`EnumType\` object types. All fields are combined with a logical ‘and.’
"""
input EnumTypeFilter {
  """Checks for all expressions in this list."""
  and: [EnumTypeFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: EnumTypeFilter

  """Checks for any expressions in this list."""
  or: [EnumTypeFilter!]
}

"""A connection to a list of \`EnumType\` values."""
type EnumTypesConnection {
  """
  A list of edges which contains the \`EnumType\` and cursor to aid in pagination.
  """
  edges: [EnumTypesEdge]!

  """A list of \`EnumType\` objects."""
  nodes: [EnumType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`EnumType\` you could get from the connection."""
  totalCount: Int!
}

"""A \`EnumType\` edge in the connection."""
type EnumTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`EnumType\` at the end of the edge."""
  node: EnumType
}

"""Methods to use when ordering \`EnumType\`."""
enum EnumTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Filterable implements Node {
  """Reads a single \`Backward\` that is related to this \`Filterable\`."""
  backwardByFilterableId: Backward
  backwardCompound1: Int
  backwardCompound2: Int

  """
  Reads a single \`BackwardCompound\` that is related to this \`Filterable\`.
  """
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompound
  bit4: BitString
  bool: Boolean
  bpchar4: String
  bytea: Base64EncodedBinary
  char4: String
  cidr: String
  citext: String
  compositeColumn: Composite
  computed: String
  computed2: String
  computedChild: Child
  computedIntArray: [Int]

  """Reads and enables pagination through a set of \`Child\`."""
  computedSetofChild(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int
  ): ChildrenConnection!

  """Reads and enables pagination through a set of \`Int4\`."""
  computedSetofInt(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int
  ): FilterableComputedSetofIntConnection!
  computedTaggedFilterable: Int
  computedWithRequiredArg(i: Int!): Int
  date: Date
  float4: Float
  float8: Float

  """Reads a single \`Forward\` that is related to this \`Filterable\`."""
  forwardByForwardId: Forward
  forwardColumn: Forward
  forwardCompound1: Int
  forwardCompound2: Int

  """Reads a single \`ForwardCompound\` that is related to this \`Filterable\`."""
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompound
  forwardId: Int
  hstore: KeyValueHash
  id: Int!
  inet: InternetAddress
  int2: Int
  int4: Int
  int8: BigInt
  interval: Interval
  json: JSON
  jsonb: JSON
  macaddr: String
  money: Float
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  numeric: BigFloat

  """Reads a single \`Parent\` that is related to this \`Filterable\`."""
  parentByParentId: Parent
  parentId: Int
  text: String
  textOmitFilter: String
  time: Time
  timestamp: Datetime
  timestamptz: Datetime
  timetz: Time
  uuid: UUID
  varbit: BitString
  varchar: String
  xml: XML
}

type FilterableClosure implements Node {
  ancestorId: Int!
  depth: Int!
  descendantId: Int!

  """
  Reads a single \`Filterable\` that is related to this \`FilterableClosure\`.
  """
  filterableByAncestorId: Filterable

  """
  Reads a single \`Filterable\` that is related to this \`FilterableClosure\`.
  """
  filterableByDescendantId: Filterable
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of \`Int\` values."""
type FilterableComputedSetofIntConnection {
  """
  A list of edges which contains the \`Int\` and cursor to aid in pagination.
  """
  edges: [FilterableComputedSetofIntEdge]!

  """A list of \`Int\` objects."""
  nodes: [Int]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Int\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Int\` edge in the connection."""
type FilterableComputedSetofIntEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Int\` at the end of the edge."""
  node: Int
}

"""
A filter to be used against \`Filterable\` object types. All fields are combined with a logical ‘and.’
"""
input FilterableFilter {
  """Checks for all expressions in this list."""
  and: [FilterableFilter!]

  """Filter by the object’s \`backwardByFilterableId\` relation."""
  backwardByFilterableId: BackwardFilter

  """A related \`backwardByFilterableId\` exists."""
  backwardByFilterableIdExists: Boolean

  """Filter by the object’s \`backwardCompound1\` field."""
  backwardCompound1: IntFilter

  """
  Filter by the object’s \`backwardCompoundByBackwardCompound1AndBackwardCompound2\` relation.
  """
  backwardCompoundByBackwardCompound1AndBackwardCompound2: BackwardCompoundFilter

  """
  A related \`backwardCompoundByBackwardCompound1AndBackwardCompound2\` exists.
  """
  backwardCompoundByBackwardCompound1AndBackwardCompound2Exists: Boolean

  """Filter by the object’s \`computedTaggedFilterable\` field."""
  computedTaggedFilterable: IntFilter

  """Filter by the object’s \`forwardByForwardId\` relation."""
  forwardByForwardId: ForwardFilter

  """A related \`forwardByForwardId\` exists."""
  forwardByForwardIdExists: Boolean

  """Filter by the object’s \`forwardCompound1\` field."""
  forwardCompound1: IntFilter

  """
  Filter by the object’s \`forwardCompoundByForwardCompound1AndForwardCompound2\` relation.
  """
  forwardCompoundByForwardCompound1AndForwardCompound2: ForwardCompoundFilter

  """
  A related \`forwardCompoundByForwardCompound1AndForwardCompound2\` exists.
  """
  forwardCompoundByForwardCompound1AndForwardCompound2Exists: Boolean

  """Filter by the object’s \`forwardId\` field."""
  forwardId: IntFilter

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: FilterableFilter

  """Checks for any expressions in this list."""
  or: [FilterableFilter!]

  """Filter by the object’s \`parentByParentId\` relation."""
  parentByParentId: ParentFilter

  """A related \`parentByParentId\` exists."""
  parentByParentIdExists: Boolean
}

"""A connection to a list of \`Filterable\` values."""
type FilterablesConnection {
  """
  A list of edges which contains the \`Filterable\` and cursor to aid in pagination.
  """
  edges: [FilterablesEdge]!

  """A list of \`Filterable\` objects."""
  nodes: [Filterable]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Filterable\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Filterable\` edge in the connection."""
type FilterablesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Filterable\` at the end of the edge."""
  node: Filterable
}

"""Methods to use when ordering \`Filterable\`."""
enum FilterablesOrderBy {
  BACKWARD_COMPOUND_1_ASC
  BACKWARD_COMPOUND_1_DESC
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  FORWARD_ID_ASC
  FORWARD_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Forward implements Node {
  """Reads a single \`Filterable\` that is related to this \`Forward\`."""
  filterableByForwardId: Filterable
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type ForwardCompound implements Node {
  """Reads a single \`Filterable\` that is related to this \`ForwardCompound\`."""
  filterableByForwardCompound1AndForwardCompound2: Filterable
  forwardCompound1: Int!
  forwardCompound2: Int!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`ForwardCompound\` object types. All fields are combined with a logical ‘and.’
"""
input ForwardCompoundFilter {
  """Checks for all expressions in this list."""
  and: [ForwardCompoundFilter!]

  """
  Filter by the object’s \`filterableByForwardCompound1AndForwardCompound2\` relation.
  """
  filterableByForwardCompound1AndForwardCompound2: FilterableFilter

  """A related \`filterableByForwardCompound1AndForwardCompound2\` exists."""
  filterableByForwardCompound1AndForwardCompound2Exists: Boolean

  """Filter by the object’s \`forwardCompound1\` field."""
  forwardCompound1: IntFilter

  """Negates the expression."""
  not: ForwardCompoundFilter

  """Checks for any expressions in this list."""
  or: [ForwardCompoundFilter!]
}

"""A connection to a list of \`ForwardCompound\` values."""
type ForwardCompoundsConnection {
  """
  A list of edges which contains the \`ForwardCompound\` and cursor to aid in pagination.
  """
  edges: [ForwardCompoundsEdge]!

  """A list of \`ForwardCompound\` objects."""
  nodes: [ForwardCompound]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`ForwardCompound\` you could get from the connection.
  """
  totalCount: Int!
}

"""A \`ForwardCompound\` edge in the connection."""
type ForwardCompoundsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`ForwardCompound\` at the end of the edge."""
  node: ForwardCompound
}

"""Methods to use when ordering \`ForwardCompound\`."""
enum ForwardCompoundsOrderBy {
  FORWARD_COMPOUND_1_ASC
  FORWARD_COMPOUND_1_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against \`Forward\` object types. All fields are combined with a logical ‘and.’
"""
input ForwardFilter {
  """Checks for all expressions in this list."""
  and: [ForwardFilter!]

  """Filter by the object’s \`filterableByForwardId\` relation."""
  filterableByForwardId: FilterableFilter

  """A related \`filterableByForwardId\` exists."""
  filterableByForwardIdExists: Boolean

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: ForwardFilter

  """Checks for any expressions in this list."""
  or: [ForwardFilter!]
}

"""A connection to a list of \`Forward\` values."""
type ForwardsConnection {
  """
  A list of edges which contains the \`Forward\` and cursor to aid in pagination.
  """
  edges: [ForwardsEdge]!

  """A list of \`Forward\` objects."""
  nodes: [Forward]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Forward\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Forward\` edge in the connection."""
type ForwardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Forward\` at the end of the edge."""
  node: Forward
}

"""Methods to use when ordering \`Forward\`."""
enum ForwardsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FullyOmitted implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  text: String
}

"""A connection to a list of \`FullyOmitted\` values."""
type FullyOmittedsConnection {
  """
  A list of edges which contains the \`FullyOmitted\` and cursor to aid in pagination.
  """
  edges: [FullyOmittedsEdge]!

  """A list of \`FullyOmitted\` objects."""
  nodes: [FullyOmitted]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`FullyOmitted\` you could get from the connection."""
  totalCount: Int!
}

"""A \`FullyOmitted\` edge in the connection."""
type FullyOmittedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`FullyOmitted\` at the end of the edge."""
  node: FullyOmitted
}

"""Methods to use when ordering \`FullyOmitted\`."""
enum FullyOmittedsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of \`FuncReturnsTableMultiColRecord\` values."""
type FuncReturnsTableMultiColConnection {
  """
  A list of edges which contains the \`FuncReturnsTableMultiColRecord\` and cursor to aid in pagination.
  """
  edges: [FuncReturnsTableMultiColEdge]!

  """A list of \`FuncReturnsTableMultiColRecord\` objects."""
  nodes: [FuncReturnsTableMultiColRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`FuncReturnsTableMultiColRecord\` you could get from the connection.
  """
  totalCount: Int!
}

"""A \`FuncReturnsTableMultiColRecord\` edge in the connection."""
type FuncReturnsTableMultiColEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`FuncReturnsTableMultiColRecord\` at the end of the edge."""
  node: FuncReturnsTableMultiColRecord
}

type FuncReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

"""A connection to a list of \`Int\` values."""
type FuncReturnsTableOneColConnection {
  """
  A list of edges which contains the \`Int\` and cursor to aid in pagination.
  """
  edges: [FuncReturnsTableOneColEdge]!

  """A list of \`Int\` objects."""
  nodes: [Int]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Int\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Int\` edge in the connection."""
type FuncReturnsTableOneColEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Int\` at the end of the edge."""
  node: Int
}

"""
A connection to a list of \`FuncTaggedFilterableReturnsTableMultiColRecord\` values.
"""
type FuncTaggedFilterableReturnsTableMultiColConnection {
  """
  A list of edges which contains the \`FuncTaggedFilterableReturnsTableMultiColRecord\` and cursor to aid in pagination.
  """
  edges: [FuncTaggedFilterableReturnsTableMultiColEdge]!

  """A list of \`FuncTaggedFilterableReturnsTableMultiColRecord\` objects."""
  nodes: [FuncTaggedFilterableReturnsTableMultiColRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* \`FuncTaggedFilterableReturnsTableMultiColRecord\` you could get from the connection.
  """
  totalCount: Int!
}

"""
A \`FuncTaggedFilterableReturnsTableMultiColRecord\` edge in the connection.
"""
type FuncTaggedFilterableReturnsTableMultiColEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  The \`FuncTaggedFilterableReturnsTableMultiColRecord\` at the end of the edge.
  """
  node: FuncTaggedFilterableReturnsTableMultiColRecord
}

type FuncTaggedFilterableReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

scalar Int4Domain

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if \`true\` is specified) or is not null (if \`false\` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""A range of \`Int\`."""
type IntRange {
  """The ending bound of our range."""
  end: IntRangeBound

  """The starting bound of our range."""
  start: IntRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type IntRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Int!
}

"""An IPv4 or IPv6 host address, and optionally its subnet."""
scalar InternetAddress

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JsonbTest implements Node {
  id: Int!
  jsonbWithArray: JSON
  jsonbWithObject: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`JsonbTest\` object types. All fields are combined with a logical ‘and.’
"""
input JsonbTestFilter {
  """Checks for all expressions in this list."""
  and: [JsonbTestFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: JsonbTestFilter

  """Checks for any expressions in this list."""
  or: [JsonbTestFilter!]
}

"""A connection to a list of \`JsonbTest\` values."""
type JsonbTestsConnection {
  """
  A list of edges which contains the \`JsonbTest\` and cursor to aid in pagination.
  """
  edges: [JsonbTestsEdge]!

  """A list of \`JsonbTest\` objects."""
  nodes: [JsonbTest]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`JsonbTest\` you could get from the connection."""
  totalCount: Int!
}

"""A \`JsonbTest\` edge in the connection."""
type JsonbTestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`JsonbTest\` at the end of the edge."""
  node: JsonbTest
}

"""Methods to use when ordering \`JsonbTest\`."""
enum JsonbTestsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Junction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single \`SideA\` that is related to this \`Junction\`."""
  sideABySideAId: SideA
  sideAId: Int!

  """Reads a single \`SideB\` that is related to this \`Junction\`."""
  sideBBySideBId: SideB
  sideBId: Int!
}

"""
A filter to be used against \`Junction\` object types. All fields are combined with a logical ‘and.’
"""
input JunctionFilter {
  """Checks for all expressions in this list."""
  and: [JunctionFilter!]

  """Negates the expression."""
  not: JunctionFilter

  """Checks for any expressions in this list."""
  or: [JunctionFilter!]

  """Filter by the object’s \`sideABySideAId\` relation."""
  sideABySideAId: SideAFilter

  """Filter by the object’s \`sideAId\` field."""
  sideAId: IntFilter

  """Filter by the object’s \`sideBBySideBId\` relation."""
  sideBBySideBId: SideBFilter
}

"""A connection to a list of \`Junction\` values."""
type JunctionsConnection {
  """
  A list of edges which contains the \`Junction\` and cursor to aid in pagination.
  """
  edges: [JunctionsEdge]!

  """A list of \`Junction\` objects."""
  nodes: [Junction]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Junction\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Junction\` edge in the connection."""
type JunctionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Junction\` at the end of the edge."""
  node: Junction
}

"""Methods to use when ordering \`Junction\`."""
enum JunctionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SIDE_A_ID_ASC
  SIDE_A_ID_DESC
}

"""
A set of key/value pairs, keys are strings, values may be a string or null. Exposed as a JSON object.
"""
scalar KeyValueHash

enum Mood {
  HAPPY
  OK
  SAD
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Parent implements Node {
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`Parent\` object types. All fields are combined with a logical ‘and.’
"""
input ParentFilter {
  """Checks for all expressions in this list."""
  and: [ParentFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: ParentFilter

  """Checks for any expressions in this list."""
  or: [ParentFilter!]
}

"""A connection to a list of \`Parent\` values."""
type ParentsConnection {
  """
  A list of edges which contains the \`Parent\` and cursor to aid in pagination.
  """
  edges: [ParentsEdge]!

  """A list of \`Parent\` objects."""
  nodes: [Parent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Parent\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Parent\` edge in the connection."""
type ParentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Parent\` at the end of the edge."""
  node: Parent
}

"""Methods to use when ordering \`Parent\`."""
enum ParentsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Protected implements Node {
  id: Int!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  otherId: Int
}

"""A connection to a list of \`Protected\` values."""
type ProtectedsConnection {
  """
  A list of edges which contains the \`Protected\` and cursor to aid in pagination.
  """
  edges: [ProtectedsEdge]!

  """A list of \`Protected\` objects."""
  nodes: [Protected]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Protected\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Protected\` edge in the connection."""
type ProtectedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Protected\` at the end of the edge."""
  node: Protected
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of \`ArrayType\`."""
  allArrayTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArrayTypeFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`ArrayType\`."""
    orderBy: [ArrayTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArrayTypesConnection

  """Reads and enables pagination through a set of \`BackwardCompound\`."""
  allBackwardCompounds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BackwardCompoundFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`BackwardCompound\`."""
    orderBy: [BackwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardCompoundsConnection

  """Reads and enables pagination through a set of \`Backward\`."""
  allBackwards(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BackwardFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Backward\`."""
    orderBy: [BackwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BackwardsConnection

  """Reads and enables pagination through a set of \`ChildNoRelatedFilter\`."""
  allChildNoRelatedFilters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChildNoRelatedFilterFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`ChildNoRelatedFilter\`."""
    orderBy: [ChildNoRelatedFiltersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildNoRelatedFiltersConnection

  """Reads and enables pagination through a set of \`Child\`."""
  allChildren(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChildFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Child\`."""
    orderBy: [ChildrenOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildrenConnection

  """Reads and enables pagination through a set of \`DomainType\`."""
  allDomainTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DomainTypeFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`DomainType\`."""
    orderBy: [DomainTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DomainTypesConnection

  """Reads and enables pagination through a set of \`EnumArrayType\`."""
  allEnumArrayTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnumArrayTypeFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`EnumArrayType\`."""
    orderBy: [EnumArrayTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnumArrayTypesConnection

  """Reads and enables pagination through a set of \`EnumType\`."""
  allEnumTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnumTypeFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`EnumType\`."""
    orderBy: [EnumTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnumTypesConnection

  """Reads and enables pagination through a set of \`Filterable\`."""
  allFilterables(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FilterableFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Filterable\`."""
    orderBy: [FilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilterablesConnection

  """Reads and enables pagination through a set of \`ForwardCompound\`."""
  allForwardCompounds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ForwardCompoundFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`ForwardCompound\`."""
    orderBy: [ForwardCompoundsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardCompoundsConnection

  """Reads and enables pagination through a set of \`Forward\`."""
  allForwards(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ForwardFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Forward\`."""
    orderBy: [ForwardsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForwardsConnection

  """Reads and enables pagination through a set of \`FullyOmitted\`."""
  allFullyOmitteds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`FullyOmitted\`."""
    orderBy: [FullyOmittedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FullyOmittedsConnection

  """Reads and enables pagination through a set of \`JsonbTest\`."""
  allJsonbTests(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JsonbTestFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`JsonbTest\`."""
    orderBy: [JsonbTestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JsonbTestsConnection

  """Reads and enables pagination through a set of \`Junction\`."""
  allJunctions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JunctionFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Junction\`."""
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection

  """Reads and enables pagination through a set of \`Parent\`."""
  allParents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ParentFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Parent\`."""
    orderBy: [ParentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentsConnection

  """Reads and enables pagination through a set of \`RangeArrayType\`."""
  allRangeArrayTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeArrayTypeFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`RangeArrayType\`."""
    orderBy: [RangeArrayTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RangeArrayTypesConnection

  """Reads and enables pagination through a set of \`RangeType\`."""
  allRangeTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RangeTypeFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`RangeType\`."""
    orderBy: [RangeTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RangeTypesConnection

  """Reads and enables pagination through a set of \`SideA\`."""
  allSideAs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SideAFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`SideA\`."""
    orderBy: [SideAsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SideASConnection

  """Reads and enables pagination through a set of \`SideB\`."""
  allSideBs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SideBFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`SideB\`."""
    orderBy: [SideBsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SideBSConnection

  """Reads and enables pagination through a set of \`Unfilterable\`."""
  allUnfilterables(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Unfilterable\`."""
    orderBy: [UnfilterablesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnfilterablesConnection

  """Reads a single \`ArrayType\` using its globally unique \`ID\`."""
  arrayType(
    """The globally unique \`ID\` to be used in selecting a single \`ArrayType\`."""
    nodeId: ID!
  ): ArrayType

  """Get a single \`ArrayType\`."""
  arrayTypeById(id: Int!): ArrayType

  """Reads a single \`Backward\` using its globally unique \`ID\`."""
  backward(
    """The globally unique \`ID\` to be used in selecting a single \`Backward\`."""
    nodeId: ID!
  ): Backward

  """Get a single \`Backward\`."""
  backwardByFilterableId(filterableId: Int!): Backward

  """Get a single \`Backward\`."""
  backwardById(id: Int!): Backward

  """Reads a single \`BackwardCompound\` using its globally unique \`ID\`."""
  backwardCompound(
    """
    The globally unique \`ID\` to be used in selecting a single \`BackwardCompound\`.
    """
    nodeId: ID!
  ): BackwardCompound

  """Get a single \`BackwardCompound\`."""
  backwardCompoundByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): BackwardCompound

  """Reads a single \`Child\` using its globally unique \`ID\`."""
  child(
    """The globally unique \`ID\` to be used in selecting a single \`Child\`."""
    nodeId: ID!
  ): Child

  """Get a single \`Child\`."""
  childById(id: Int!): Child

  """Reads a single \`ChildNoRelatedFilter\` using its globally unique \`ID\`."""
  childNoRelatedFilter(
    """
    The globally unique \`ID\` to be used in selecting a single \`ChildNoRelatedFilter\`.
    """
    nodeId: ID!
  ): ChildNoRelatedFilter

  """Get a single \`ChildNoRelatedFilter\`."""
  childNoRelatedFilterById(id: Int!): ChildNoRelatedFilter

  """Reads a single \`DomainType\` using its globally unique \`ID\`."""
  domainType(
    """
    The globally unique \`ID\` to be used in selecting a single \`DomainType\`.
    """
    nodeId: ID!
  ): DomainType

  """Get a single \`DomainType\`."""
  domainTypeById(id: Int!): DomainType

  """Reads a single \`EnumArrayType\` using its globally unique \`ID\`."""
  enumArrayType(
    """
    The globally unique \`ID\` to be used in selecting a single \`EnumArrayType\`.
    """
    nodeId: ID!
  ): EnumArrayType

  """Get a single \`EnumArrayType\`."""
  enumArrayTypeById(id: Int!): EnumArrayType

  """Reads a single \`EnumType\` using its globally unique \`ID\`."""
  enumType(
    """The globally unique \`ID\` to be used in selecting a single \`EnumType\`."""
    nodeId: ID!
  ): EnumType

  """Get a single \`EnumType\`."""
  enumTypeById(id: Int!): EnumType

  """Reads a single \`Filterable\` using its globally unique \`ID\`."""
  filterable(
    """
    The globally unique \`ID\` to be used in selecting a single \`Filterable\`.
    """
    nodeId: ID!
  ): Filterable

  """Get a single \`Filterable\`."""
  filterableByBackwardCompound1AndBackwardCompound2(backwardCompound1: Int!, backwardCompound2: Int!): Filterable

  """Get a single \`Filterable\`."""
  filterableByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): Filterable

  """Get a single \`Filterable\`."""
  filterableByForwardId(forwardId: Int!): Filterable

  """Get a single \`Filterable\`."""
  filterableById(id: Int!): Filterable

  """Reads a single \`FilterableClosure\` using its globally unique \`ID\`."""
  filterableClosure(
    """
    The globally unique \`ID\` to be used in selecting a single \`FilterableClosure\`.
    """
    nodeId: ID!
  ): FilterableClosure

  """Get a single \`FilterableClosure\`."""
  filterableClosureById(id: Int!): FilterableClosure

  """Reads a single \`Forward\` using its globally unique \`ID\`."""
  forward(
    """The globally unique \`ID\` to be used in selecting a single \`Forward\`."""
    nodeId: ID!
  ): Forward

  """Get a single \`Forward\`."""
  forwardById(id: Int!): Forward

  """Reads a single \`ForwardCompound\` using its globally unique \`ID\`."""
  forwardCompound(
    """
    The globally unique \`ID\` to be used in selecting a single \`ForwardCompound\`.
    """
    nodeId: ID!
  ): ForwardCompound

  """Get a single \`ForwardCompound\`."""
  forwardCompoundByForwardCompound1AndForwardCompound2(forwardCompound1: Int!, forwardCompound2: Int!): ForwardCompound

  """Reads a single \`FullyOmitted\` using its globally unique \`ID\`."""
  fullyOmitted(
    """
    The globally unique \`ID\` to be used in selecting a single \`FullyOmitted\`.
    """
    nodeId: ID!
  ): FullyOmitted

  """Get a single \`FullyOmitted\`."""
  fullyOmittedById(id: Int!): FullyOmitted

  """
  Reads and enables pagination through a set of \`FuncReturnsTableMultiColRecord\`.
  """
  funcReturnsTableMultiCol(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int
    i: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int
  ): FuncReturnsTableMultiColConnection

  """Reads and enables pagination through a set of \`Int4\`."""
  funcReturnsTableOneCol(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int
    i: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int
  ): FuncReturnsTableOneColConnection

  """Reads and enables pagination through a set of \`Filterable\`."""
  funcTaggedFilterableReturnsSetofFilterable(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int
  ): FilterablesConnection

  """
  Reads and enables pagination through a set of \`FuncTaggedFilterableReturnsTableMultiColRecord\`.
  """
  funcTaggedFilterableReturnsTableMultiCol(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int
  ): FuncTaggedFilterableReturnsTableMultiColConnection

  """Reads a single \`JsonbTest\` using its globally unique \`ID\`."""
  jsonbTest(
    """The globally unique \`ID\` to be used in selecting a single \`JsonbTest\`."""
    nodeId: ID!
  ): JsonbTest

  """Get a single \`JsonbTest\`."""
  jsonbTestById(id: Int!): JsonbTest

  """Reads a single \`Junction\` using its globally unique \`ID\`."""
  junction(
    """The globally unique \`ID\` to be used in selecting a single \`Junction\`."""
    nodeId: ID!
  ): Junction

  """Get a single \`Junction\`."""
  junctionBySideAIdAndSideBId(sideAId: Int!, sideBId: Int!): Junction

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Reads a single \`Parent\` using its globally unique \`ID\`."""
  parent(
    """The globally unique \`ID\` to be used in selecting a single \`Parent\`."""
    nodeId: ID!
  ): Parent

  """Get a single \`Parent\`."""
  parentById(id: Int!): Parent

  """Reads a single \`Protected\` using its globally unique \`ID\`."""
  protected(
    """The globally unique \`ID\` to be used in selecting a single \`Protected\`."""
    nodeId: ID!
  ): Protected

  """Get a single \`Protected\`."""
  protectedById(id: Int!): Protected

  """Reads and enables pagination through a set of \`Protected\`."""
  protectedsByOtherId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int
    otherId: Int
  ): ProtectedsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single \`RangeArrayType\` using its globally unique \`ID\`."""
  rangeArrayType(
    """
    The globally unique \`ID\` to be used in selecting a single \`RangeArrayType\`.
    """
    nodeId: ID!
  ): RangeArrayType

  """Get a single \`RangeArrayType\`."""
  rangeArrayTypeById(id: Int!): RangeArrayType

  """Reads a single \`RangeType\` using its globally unique \`ID\`."""
  rangeType(
    """The globally unique \`ID\` to be used in selecting a single \`RangeType\`."""
    nodeId: ID!
  ): RangeType

  """Get a single \`RangeType\`."""
  rangeTypeById(id: Int!): RangeType

  """Reads a single \`SideA\` using its globally unique \`ID\`."""
  sideA(
    """The globally unique \`ID\` to be used in selecting a single \`SideA\`."""
    nodeId: ID!
  ): SideA

  """Get a single \`SideA\`."""
  sideAByAId(aId: Int!): SideA

  """Reads a single \`SideB\` using its globally unique \`ID\`."""
  sideB(
    """The globally unique \`ID\` to be used in selecting a single \`SideB\`."""
    nodeId: ID!
  ): SideB

  """Get a single \`SideB\`."""
  sideBByBId(bId: Int!): SideB

  """Reads a single \`Unfilterable\` using its globally unique \`ID\`."""
  unfilterable(
    """
    The globally unique \`ID\` to be used in selecting a single \`Unfilterable\`.
    """
    nodeId: ID!
  ): Unfilterable

  """Get a single \`Unfilterable\`."""
  unfilterableById(id: Int!): Unfilterable
}

type RangeArrayType implements Node {
  dateRangeArray: [DateRange]
  id: Int!
  int4RangeArray: [IntRange]
  int8RangeArray: [BigIntRange]

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  numericRangeArray: [BigFloatRange]
  timestampRangeArray: [DatetimeRange]
  timestamptzRangeArray: [DatetimeRange]
}

"""
A filter to be used against \`RangeArrayType\` object types. All fields are combined with a logical ‘and.’
"""
input RangeArrayTypeFilter {
  """Checks for all expressions in this list."""
  and: [RangeArrayTypeFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: RangeArrayTypeFilter

  """Checks for any expressions in this list."""
  or: [RangeArrayTypeFilter!]
}

"""A connection to a list of \`RangeArrayType\` values."""
type RangeArrayTypesConnection {
  """
  A list of edges which contains the \`RangeArrayType\` and cursor to aid in pagination.
  """
  edges: [RangeArrayTypesEdge]!

  """A list of \`RangeArrayType\` objects."""
  nodes: [RangeArrayType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`RangeArrayType\` you could get from the connection."""
  totalCount: Int!
}

"""A \`RangeArrayType\` edge in the connection."""
type RangeArrayTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`RangeArrayType\` at the end of the edge."""
  node: RangeArrayType
}

"""Methods to use when ordering \`RangeArrayType\`."""
enum RangeArrayTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type RangeType implements Node {
  dateRange: DateRange
  id: Int!
  int4Range: IntRange
  int8Range: BigIntRange

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  numericRange: BigFloatRange
  timestampRange: DatetimeRange
  timestamptzRange: DatetimeRange
}

"""
A filter to be used against \`RangeType\` object types. All fields are combined with a logical ‘and.’
"""
input RangeTypeFilter {
  """Checks for all expressions in this list."""
  and: [RangeTypeFilter!]

  """Filter by the object’s \`id\` field."""
  id: IntFilter

  """Negates the expression."""
  not: RangeTypeFilter

  """Checks for any expressions in this list."""
  or: [RangeTypeFilter!]
}

"""A connection to a list of \`RangeType\` values."""
type RangeTypesConnection {
  """
  A list of edges which contains the \`RangeType\` and cursor to aid in pagination.
  """
  edges: [RangeTypesEdge]!

  """A list of \`RangeType\` objects."""
  nodes: [RangeType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`RangeType\` you could get from the connection."""
  totalCount: Int!
}

"""A \`RangeType\` edge in the connection."""
type RangeTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`RangeType\` at the end of the edge."""
  node: RangeType
}

"""Methods to use when ordering \`RangeType\`."""
enum RangeTypesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SideA implements Node {
  aId: Int!

  """Reads and enables pagination through a set of \`Junction\`."""
  junctionsBySideAId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JunctionFilter

    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """The method to use when ordering \`Junction\`."""
    orderBy: [JunctionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JunctionsConnection!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`SideA\` object types. All fields are combined with a logical ‘and.’
"""
input SideAFilter {
  """Filter by the object’s \`aId\` field."""
  aId: IntFilter

  """Checks for all expressions in this list."""
  and: [SideAFilter!]

  """Filter by the object’s \`junctionsBySideAId\` relation."""
  junctionsBySideAId: SideAToManyJunctionFilter

  """Some related \`junctionsBySideAId\` exist."""
  junctionsBySideAIdExist: Boolean

  """Negates the expression."""
  not: SideAFilter

  """Checks for any expressions in this list."""
  or: [SideAFilter!]
}

"""A connection to a list of \`SideA\` values."""
type SideASConnection {
  """
  A list of edges which contains the \`SideA\` and cursor to aid in pagination.
  """
  edges: [SideASEdge]!

  """A list of \`SideA\` objects."""
  nodes: [SideA]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`SideA\` you could get from the connection."""
  totalCount: Int!
}

"""A \`SideA\` edge in the connection."""
type SideASEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`SideA\` at the end of the edge."""
  node: SideA
}

"""
A filter to be used against many \`Junction\` object types. All fields are combined with a logical ‘and.’
"""
input SideAToManyJunctionFilter {
  """
  Every related \`Junction\` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JunctionFilter

  """
  No related \`Junction\` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JunctionFilter

  """
  Some related \`Junction\` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JunctionFilter
}

"""Methods to use when ordering \`SideA\`."""
enum SideAsOrderBy {
  A_ID_ASC
  A_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SideB implements Node {
  bId: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A filter to be used against \`SideB\` object types. All fields are combined with a logical ‘and.’
"""
input SideBFilter {
  """Checks for all expressions in this list."""
  and: [SideBFilter!]

  """Filter by the object’s \`bId\` field."""
  bId: IntFilter

  """Negates the expression."""
  not: SideBFilter

  """Checks for any expressions in this list."""
  or: [SideBFilter!]
}

"""A connection to a list of \`SideB\` values."""
type SideBSConnection {
  """
  A list of edges which contains the \`SideB\` and cursor to aid in pagination.
  """
  edges: [SideBSEdge]!

  """A list of \`SideB\` objects."""
  nodes: [SideB]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`SideB\` you could get from the connection."""
  totalCount: Int!
}

"""A \`SideB\` edge in the connection."""
type SideBSEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`SideB\` at the end of the edge."""
  node: SideB
}

"""Methods to use when ordering \`SideB\`."""
enum SideBsOrderBy {
  B_ID_ASC
  B_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Unfilterable implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  text: String
}

"""A connection to a list of \`Unfilterable\` values."""
type UnfilterablesConnection {
  """
  A list of edges which contains the \`Unfilterable\` and cursor to aid in pagination.
  """
  edges: [UnfilterablesEdge]!

  """A list of \`Unfilterable\` objects."""
  nodes: [Unfilterable]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Unfilterable\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Unfilterable\` edge in the connection."""
type UnfilterablesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Unfilterable\` at the end of the edge."""
  node: Unfilterable
}

"""Methods to use when ordering \`Unfilterable\`."""
enum UnfilterablesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An XML document"""
scalar XML"
`;
